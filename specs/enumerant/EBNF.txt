The .spec files from the SI are normally processed by Perl/AWK scripts and have
therefore a rather ugly line-oriented syntax. To make things more amenable to
"real" parsing, some lexical preprocessing is useful. Note that the following
algorithm doesn't remove or insert lines, which is important for good error
messages later. After this preprocessing, whitespace is not significant anymore,
apart from its common use as a token separator.

For every line do:

   1) Remove comments: Remove everything starting at the first '#'.

   2) Ignore passthru-hack: Consider lines starting with 'passthru:' as empty.

   3) Remove trailing whitespace.

   4) Mangle property declarations: Append ';' to a line where the first ':'
      is only preceded by non-TAB and non-SPC characters. Additionally, move
      that ':' to the beginning of the line.

   5) Separate definitions: Append ',' to a line starting with TAB and followed
      (ignoring empty lines) by a line starting with TAB.

   6) Terminate definitions: Append ';' to a line starting with TAB and not
      followed (ignoring empty lines) by a line starting with TAB.

--------------------------------------------------------------------------------

enumerantSpec  = { typeDefinition, ";" };
typeDefinition = typeName, kind, ":", equations;
kind           = "enum" | "mask" | "float" | "define";
equations      = [ equation, ",", { equation } ];
equation       = use | definition;
use            = "use", typeName, identifier;
definition     = identifier, [ "=", value ];
value          = ( reference | number );
reference      = "$", identifier, [ "+", number ];
number         = hexNumber | decNumber;
hexNumber      = ( "0x" | "0X" ), hexDigit, { hexDigit };
hexDigit       = digit | "a" | "b" | "c" | "d" | "e" | "f"
                       | "A" | "B" | "C" | "D" | "E" | "F";
decNumber      = digit, { digit };
digit          = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9";
typeName       = word;
identifier     = word - "use";
word           = wordChar, { wordChar };
wordChar       = character - (" " | punctuation);
punctuation    = ";" | ":" | "," | "=" | "+" | "$" ;
